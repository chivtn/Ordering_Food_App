# from OrderingFoodApp import init_app, db
# from OrderingFoodApp.models import *
# from faker import Faker
# from werkzeug.security import generate_password_hash
# import random
# from datetime import datetime, timedelta
#
# fake = Faker('vi_VN')
#
#
# def seed_data():
#     # ========== ADMIN ==========
#     admin = User(
#         name="Qu·∫£n tr·ªã vi√™n",
#         email="admin@example.com",
#         password=generate_password_hash("admin123"),
#         role=UserRole.ADMIN
#     )
#     db.session.add(admin)
#
#     # ========== T·∫†O CH·ª¶ NH√Ä H√ÄNG ==========
#     owners = []
#     for i in range(1, 6):  # 5 ch·ªß nh√† h√†ng
#         owner = User(
#             name=fake.name(),
#             email=f"owner{i}@example.com",
#             password=generate_password_hash("owner123"),
#             role=UserRole.OWNER
#         )
#         db.session.add(owner)
#         db.session.flush()
#         owners.append(owner)
#
#     # ========== T·∫†O KH√ÅCH H√ÄNG ==========
#     customers = []
#     for i in range(1, 6):  # 5 kh√°ch h√†ng
#         customer = User(
#             name=fake.name(),
#             email=f"customer{i}@example.com",
#             password=generate_password_hash("customer123"),
#             role=UserRole.CUSTOMER
#         )
#         db.session.add(customer)
#         db.session.flush()
#         customers.append(customer)
#
#     db.session.commit()
#
#     # ========== DANH M·ª§C M√ìN ƒÇN ==========
#     category_names = [
#         {"name": "Khai V·ªã",
#          "image_url": "https://img.lovepik.com/png/20231111/appetizer-clipart-platter-of-food-is-arranged-on-top-cartoon_558150_wh1200.png"},
#         {"name": "M√≥n Ch√≠nh",
#          "image_url": "https://png.pngtree.com/png-vector/20240528/ourlarge/pngtree-a-chinese-style-cuisine-looking-beautiful-png-image_12504550.png"},
#         {"name": "Tr√°ng Mi·ªáng",
#          "image_url": "https://img.lovepik.com/png/20231107/Piece-of-cake-cartoon-pastry-illustration-strawberry-snack_520860_wh860.png"},
#         {"name": "ƒê·ªì U·ªëng",
#          "image_url": "https://img.lovepik.com/free-png/20210927/lovepik-drink-png-image_401579146_wh1200.png"}
#     ]
#     categories = []
#     for data in category_names:
#         cat = MenuCategory(name=data["name"], image_url=data["image_url"])
#         db.session.add(cat)
#         db.session.flush()
#         categories.append(cat)
#
#     # ========== T√äN NH√Ä H√ÄNG & M√ìN ƒÇN ƒêA D·∫†NG ==========
#     restaurant_types = [
#         ("Fast Food Hub", ["Burger", "Pizza", "Fried Chicken", "French Fries"]),
#         ("Healthy Corner", ["Salad", "Smoothie Bowl", "Vegan Wrap", "Detox Juice"]),
#         ("Cafe Chill", ["Latte", "Cappuccino", "Matcha", "Cheesecake"]),
#         ("BBQ & Hotpot", ["L·∫©u Th√°i", "L·∫©u B√≤", "N∆∞·ªõng BBQ", "H·∫£i s·∫£n n∆∞·ªõng"]),
#         ("Asian Delights", ["Sushi", "Ramen", "Pad Thai", "B√°nh M√¨"])
#     ]
#
#     restaurants = []
#     menu_items = []
#
#     for owner in owners:
#         for _ in range(random.randint(2, 6)):  # M·ªói ch·ªß 2-3 nh√† h√†ng
#             rest_type = random.choice(restaurant_types)
#             restaurant = Restaurant(
#                 owner_id=owner.id,
#                 name=f"{rest_type[0]} {fake.city_suffix()}",
#                 description=fake.text(max_nb_chars=150),
#                 address=fake.address(),
#                 phone=fake.phone_number(),
#                 latitude=random.uniform(10.75, 10.80),
#                 longitude=random.uniform(106.65, 106.70),
#                 image_url=f"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNRas_-SFKO__MFuzdDpDJX1N-lQ4uhw2ODw&s"
#                 # Th√™m d√≤ng n√†y
#             )
#             db.session.add(restaurant)
#             db.session.flush()
#             restaurants.append(restaurant)
#
#             # T·∫°o m√≥n ƒÉn
#             for cat in categories:
#                 for _ in range(random.randint(3, 5)):  # 3‚Äì5 m√≥n m·ªói danh m·ª•c
#                     dish_name = random.choice(rest_type[1])
#                     menu_item = MenuItem(
#                         restaurant_id=restaurant.id,
#                         category_id=cat.id,
#                         name=f"{dish_name} {fake.word().capitalize()}",
#                         description=f"M√≥n {dish_name} y√™u th√≠ch c·ªßa gi·ªõi tr·∫ª v√† d√¢n vƒÉn ph√≤ng.",
#                         price=random.randint(30000, 120000),
#                         image_url="https://food-cms.grab.com/compressed_webp/items/VNITE2025021904274992700/detail/menueditor_item_b63ce334b95042ed85f8e266b6724540_1739939243566377306.webp"
#                     )
#                     db.session.add(menu_item)
#                     menu_items.append(menu_item)
#
#     db.session.commit()
#
#     # ========== T·∫†O GI·ªé H√ÄNG & ƒê∆†N H√ÄNG ==========
#     for customer in customers:
#         for _ in range(5):  # üëâ M·ªói kh√°ch h√†ng t·∫°o 5 ƒë∆°n h√†ng
#             selected_restaurant = random.choice(restaurants)
#             items = MenuItem.query.filter_by(restaurant_id=selected_restaurant.id).limit(4).all()
#
#             # Gi·ªè h√†ng
#             cart = Cart(customer_id=customer.id)
#             db.session.add(cart)
#             db.session.flush()
#             for item in items:
#                 cart_item = CartItem(
#                     cart_id=cart.id,
#                     menu_item_id=item.id,
#                     quantity=random.randint(1, 3)
#                 )
#                 db.session.add(cart_item)
#
#             # ƒê∆°n h√†ng
#             total_amount = sum(item.price * 2 for item in items)
#
#             # Random tr·∫°ng th√°i ƒë∆°n h√†ng
#             order_status = random.choice([
#                 OrderStatus.PENDING,
#                 OrderStatus.CONFIRMED,
#                 OrderStatus.PREPARING,
#                 OrderStatus.COMPLETED,
#                 OrderStatus.CANCELLED
#             ])
#
#             order = Order(
#                 customer_id=customer.id,
#                 restaurant_id=selected_restaurant.id,
#                 total_amount=total_amount,
#                 status=order_status
#             )
#
#             db.session.add(order)
#             db.session.flush()
#
#             for item in items:
#                 order_item = OrderItem(
#                     order_id=order.id,
#                     menu_item_id=item.id,
#                     quantity=2,
#                     price=item.price
#                 )
#                 db.session.add(order_item)
#
#             # Thanh to√°n
#             payment_status = PaymentStatus.COMPLETED if order_status == OrderStatus.COMPLETED else PaymentStatus.PENDING
#             payment = Payment(
#                 order_id=order.id,
#                 amount=total_amount,
#                 method=PaymentMethod.CASH_ON_DELIVERY,
#                 status=payment_status
#             )
#             db.session.add(payment)
#
#             # ƒê√°nh gi√°
#             review = None
#             if order_status == OrderStatus.COMPLETED:
#                 review = Review(
#                     customer_id=customer.id,
#                     restaurant_id=selected_restaurant.id,
#                     order_id=order.id,
#                     rating=random.randint(4, 5),
#                     comment=fake.sentence(nb_words=12)
#                 )
#                 db.session.add(review)
#
#                 # Ph·∫£n h·ªìi ƒë√°nh gi√°
#                 response = ReviewResponse(
#                     review=review,  # d√πng relationship thay v√¨ review_id
#                     owner_id=selected_restaurant.owner_id,
#                     response_text="C·∫£m ∆°n b·∫°n ƒë√£ ·ªßng h·ªô qu√°n!"
#                 )
#                 db.session.add(response)
#
#
#             # Th√¥ng b√°o
#             notification = Notification(
#                 user_id=customer.id,
#                 type=NotificationType.ORDER_STATUS,
#                 message=f"ƒê∆°n h√†ng #{order.id} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.",
#                 is_read=False
#             )
#             db.session.add(notification)
#
#     db.session.commit()
#
#     # ‚îÄ‚îÄ‚îÄ B·ªî SUNG PROFILE & ADDRESS CHO T·∫§T C·∫¢ USER ‚îÄ‚îÄ‚îÄ
#     # gom t·∫•t c·∫£ users v·ª´a t·∫°o
#     all_users = [admin] + owners + customers
#
#     # ========== T·∫†O 10 M√É KHUY·∫æN M√ÉI GI·∫¢ ==========
#     promo_image_urls = [
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
#         "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg"
#     ]
#
#     for i in range(10):
#         code = f"SALE{random.randint(100, 999)}"
#         promo = PromoCode(
#             code=code,
#             description=fake.sentence(nb_words=8),
#             discount_type=random.choice([DiscountType.PERCENT, DiscountType.FIXED]),
#             discount_value=random.randint(5, 50) if i % 2 == 0 else random.randint(10000, 100000),
#             start_date=datetime(2025, 7, random.randint(1, 10)),
#             end_date=datetime(2025, 8, random.randint(20, 31)),
#             usage_limit=random.choice([10, 20, 50, 100]),
#             image_url=promo_image_urls[i % len(promo_image_urls)]
#         )
#         db.session.add(promo)
#
#     db.session.commit()
#
#     for user in all_users:
#         # 1) G√°n ng√†y sinh, gi·ªõi t√≠nh, s·ªë ƒëi·ªán tho·∫°i
#         user.date_of_birth = fake.date_of_birth(minimum_age=18, maximum_age=60)
#         user.gender = random.choice(list(Gender))
#         user.phone = fake.phone_number()
#         db.session.add(user)
#
#         # 2) T·∫°o ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
#         addr_def = Address(
#             user_id=user.id,
#             address_line=fake.address(),
#             is_default=True
#         )
#         db.session.add(addr_def)
#
#         # 3) T·∫°o th√™m 1‚Äì3 ƒë·ªãa ch·ªâ ph·ª•
#         for _ in range(random.randint(1, 3)):
#             addr = Address(
#                 user_id=user.id,
#                 address_line=fake.address(),
#                 is_default=False
#             )
#             db.session.add(addr)
#
#     db.session.commit()
#
#     print("‚úÖ Seed th√†nh c√¥ng")
#
#
# if __name__ == '__main__':
#     app = init_app()
#     with app.app_context():
#         db.drop_all()
#         db.create_all()
#         seed_data()
#

from OrderingFoodApp import init_app, db
from OrderingFoodApp.models import *
from werkzeug.security import generate_password_hash
import random
from datetime import datetime, time


def seed_data():
    # ========== ADMIN ==========
    admin = User(
        name="Qu·∫£n tr·ªã vi√™n",
        email="admin@example.com",
        password=generate_password_hash("admin123"),
        role=UserRole.ADMIN
    )
    db.session.add(admin)

    # ========== T·∫†O CH·ª¶ NH√Ä H√ÄNG ==========
    owners = []
    owner_names = ["Nguy·ªÖn VƒÉn A", "Tr·∫ßn Th·ªã B", "L√™ VƒÉn C"]
    for i in range(1, 4):  # 3 ch·ªß nh√† h√†ng
        owner = User(
            name=owner_names[i - 1],
            email=f"owner{i}@example.com",
            password=generate_password_hash("owner123"),
            role=UserRole.OWNER
        )
        db.session.add(owner)
        db.session.flush()
        owners.append(owner)

    # ========== T·∫†O KH√ÅCH H√ÄNG ==========
    customers = []
    customer_names = ["Quang Mai", "ƒê·ªó Th·ªã Gi√†u", "H√† ƒê·ª©c D∆∞∆°ng", "B√πi Th·ªã Khanh", "ƒê·∫∑ng VƒÉn Linh"]
    for i in range(1, 6):  # 5 kh√°ch h√†ng
        customer = User(
            name=customer_names[i - 1],
            email=f"customer{i}@example.com",
            password=generate_password_hash("customer123"),
            role=UserRole.CUSTOMER
        )
        db.session.add(customer)
        db.session.flush()
        customers.append(customer)

    db.session.commit()

    # ========== DANH M·ª§C M√ìN ƒÇN ==========
    category_names = [
        {"name": "Khai V·ªã",
         "image_url": "https://img.lovepik.com/png/20231111/appetizer-clipart-platter-of-food-is-arranged-on-top-cartoon_558150_wh1200.png"},
        {"name": "M√≥n Ch√≠nh",
         "image_url": "https://png.pngtree.com/png-vector/20240528/ourlarge/pngtree-a-chinese-style-cuisine-looking-beautiful-png-image_12504550.png"},
        {"name": "Tr√°ng Mi·ªáng",
         "image_url": "https://img.lovepik.com/png/20231107/Piece-of-cake-cartoon-pastry-illustration-strawberry-snack_520860_wh860.png"},
        {"name": "ƒê·ªì U·ªëng",
         "image_url": "https://img.lovepik.com/free-png/20210927/lovepik-drink-png-image_401579146_wh1200.png"}
    ]
    categories = []
    for data in category_names:
        cat = MenuCategory(name=data["name"], image_url=data["image_url"])
        db.session.add(cat)
        db.session.flush()
        categories.append(cat)

    # ========== NH√Ä H√ÄNG & M√ìN ƒÇN TH·ª∞C T·∫æ T·∫†I TP.HCM ==========
    restaurants_data = [
        {
            "name": "Ph·ªü H√≤a Pasteur",
            "description": "Qu√°n ph·ªü n·ªïi ti·∫øng t·∫°i S√†i G√≤n v·ªõi h∆∞∆°ng v·ªã truy·ªÅn th·ªëng",
            "address": "260C Pasteur, Ph∆∞·ªùng 8, Qu·∫≠n 3, TP.HCM",
            "phone": "028 3829 7943",
            "latitude": 10.7829,
            "longitude": 106.6922,
            "image_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNRas_-SFKO__MFuzdDpDJX1N-lQ4uhw2ODw&s",
            "menu_items": {
                "Khai V·ªã": ["G·ªèi cu·ªën", "Ch·∫£ gi√≤", "B√≤ l√° l·ªët"],
                "M√≥n Ch√≠nh": ["Ph·ªü b√≤", "Ph·ªü g√†", "B√∫n b√≤ Hu·∫ø"],
                "Tr√°ng Mi·ªáng": ["Ch√® ƒë·∫≠u xanh", "Rau c√¢u"],
                "ƒê·ªì U·ªëng": ["Tr√† ƒë√°", "N∆∞·ªõc cam", "Sinh t·ªë"]
            }
        },
        {
            "name": "B√°nh M√¨ Hu·ª≥nh Hoa",
            "description": "Ti·ªám b√°nh m√¨ ngon nh·∫•t S√†i G√≤n",
            "address": "26 L√™ Th·ªã Ri√™ng, Ph∆∞·ªùng B·∫øn Th√†nh, Qu·∫≠n 1, TP.HCM",
            "phone": "090 909 0909",
            "latitude": 10.7715,
            "longitude": 106.6984,
            "image_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNRas_-SFKO__MFuzdDpDJX1N-lQ4uhw2ODw&s",
            "menu_items": {
                "Khai V·ªã": ["B√°nh m√¨ ch·∫£o"],
                "M√≥n Ch√≠nh": ["B√°nh m√¨ th·ªãt", "B√°nh m√¨ x√≠u m·∫°i", "B√°nh m√¨ pate"],
                "Tr√°ng Mi·ªáng": ["B√°nh flan"],
                "ƒê·ªì U·ªëng": ["S·ªØa ƒë·∫≠u n√†nh", "C√† ph√™ s·ªØa"]
            }
        },
        {
            "name": "C∆°m T·∫•m Cali",
            "description": "C∆°m t·∫•m ngon v·ªõi nhi·ªÅu l·ª±a ch·ªçn",
            "address": "456 Nguy·ªÖn ƒê√¨nh Chi·ªÉu, Ph∆∞·ªùng 4, Qu·∫≠n 3, TP.HCM",
            "phone": "028 3832 4567",
            "latitude": 10.7745,
            "longitude": 106.6879,
            "image_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNRas_-SFKO__MFuzdDpDJX1N-lQ4uhw2ODw&s",
            "menu_items": {
                "Khai V·ªã": ["G·ªèi ƒëu ƒë·ªß kh√¥ b√≤"],
                "M√≥n Ch√≠nh": ["C∆°m t·∫•m s∆∞·ªùn", "C∆°m t·∫•m b√¨", "C∆°m t·∫•m ch·∫£"],
                "Tr√°ng Mi·ªáng": ["Chu·ªëi chi√™n"],
                "ƒê·ªì U·ªëng": ["N∆∞·ªõc m√≠a", "Tr√† ƒë√°"]
            }
        },
        {
            "name": "Qu√°n ·ª§t ·ª§t",
            "description": "Chuy√™n c√°c m√≥n n∆∞·ªõng BBQ",
            "address": "168 L√™ Th√°nh T√¥n, Ph∆∞·ªùng B·∫øn Th√†nh, Qu·∫≠n 1, TP.HCM",
            "phone": "028 3823 4567",
            "latitude": 10.7723,
            "longitude": 106.7012,
            "image_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNRas_-SFKO__MFuzdDpDJX1N-lQ4uhw2ODw&s",
            "menu_items": {
                "Khai V·ªã": ["G·ªèi b√≤", "G·ªèi ng√≥ sen"],
                "M√≥n Ch√≠nh": ["B√≤ n∆∞·ªõng", "Heo n∆∞·ªõng", "H·∫£i s·∫£n n∆∞·ªõng"],
                "Tr√°ng Mi·ªáng": ["Kem", "Ch√® kh√∫c b·∫°ch"],
                "ƒê·ªì U·ªëng": ["Bia", "N∆∞·ªõc ng·ªçt"]
            }
        },
        {
            "name": "Pizza 4P's",
            "description": "Pizza √ù ch·∫•t l∆∞·ª£ng cao",
            "address": "8/15 L√™ Th√°nh T√¥n, Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, TP.HCM",
            "phone": "028 3822 0500",
            "latitude": 10.7756,
            "longitude": 106.7034,
            "image_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNRas_-SFKO__MFuzdDpDJX1N-lQ4uhw2ODw&s",
            "menu_items": {
                "Khai V·ªã": ["Salad √ù", "Bruschetta"],
                "M√≥n Ch√≠nh": ["Pizza Margherita", "Pizza h·∫£i s·∫£n", "M·ª≥ √ù"],
                "Tr√°ng Mi·ªáng": ["Tiramisu", "Gelato"],
                "ƒê·ªì U·ªëng": ["R∆∞·ª£u vang", "Cocktail"]
            }
        }
    ]

    restaurants = []
    menu_items = []

    # Ph√¢n b·ªï nh√† h√†ng cho c√°c ch·ªß (2, 2, 1)
    owner_restaurant_counts = [2, 2, 1]
    assigned_restaurants = set()  # Theo d√µi nh√† h√†ng ƒë√£ ƒë∆∞·ª£c g√°n

    for i, owner in enumerate(owners):
        count = owner_restaurant_counts[i] if i < len(owner_restaurant_counts) else 0
        available_restaurants = [r for r in restaurants_data if r["name"] not in assigned_restaurants]

        # Ch·ªçn ng·∫´u nhi√™n s·ªë l∆∞·ª£ng nh√† h√†ng c·∫ßn g√°n
        selected_restaurants = random.sample(available_restaurants, min(count, len(available_restaurants)))

        for rest_data in selected_restaurants:
            restaurant = Restaurant(
                owner_id=owner.id,
                name=rest_data["name"],
                description=rest_data["description"],
                address=rest_data["address"],
                phone=rest_data["phone"],
                latitude=rest_data["latitude"],
                longitude=rest_data["longitude"],
                image_url=rest_data["image_url"],
                opening_time=time(7, 0),
                closing_time=time(22, 0)
            )
            db.session.add(restaurant)
            db.session.flush()
            restaurants.append(restaurant)
            assigned_restaurants.add(rest_data["name"])  # ƒê√°nh d·∫•u ƒë√£ g√°n

            # T·∫°o m√≥n ƒÉn theo danh m·ª•c
            for cat in categories:
                if cat.name in rest_data["menu_items"]:
                    for dish_name in rest_data["menu_items"][cat.name]:
                        menu_item = MenuItem(
                            restaurant_id=restaurant.id,
                            category_id=cat.id,
                            name=dish_name,
                            description=f"M√≥n {dish_name} ƒë·∫∑c tr∆∞ng c·ªßa {restaurant.name}",
                            price=random.randint(30000, 120000),
                            image_url="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNRas_-SFKO__MFuzdDpDJX1N-lQ4uhw2ODw&s",
                            is_active=True
                        )
                        db.session.add(menu_item)
                        menu_items.append(menu_item)

    db.session.commit()
    # ========== T·∫†O GI·ªé H√ÄNG & ƒê∆†N H√ÄNG ==========
    for customer in customers:
        for _ in range(5):  # M·ªói kh√°ch h√†ng t·∫°o 5 ƒë∆°n h√†ng
            selected_restaurant = random.choice(restaurants)
            items = MenuItem.query.filter_by(restaurant_id=selected_restaurant.id).limit(4).all()

            # Gi·ªè h√†ng
            cart = Cart(customer_id=customer.id)
            db.session.add(cart)
            db.session.flush()
            for item in items:
                cart_item = CartItem(
                    cart_id=cart.id,
                    menu_item_id=item.id,
                    quantity=random.randint(1, 3)
                )
                db.session.add(cart_item)

            # ƒê∆°n h√†ng
            total_amount = sum(item.price * 2 for item in items)

            # Random tr·∫°ng th√°i ƒë∆°n h√†ng
            order_status = random.choice([
                OrderStatus.PENDING,
                OrderStatus.CONFIRMED,
                OrderStatus.PREPARING,
                OrderStatus.COMPLETED,
                OrderStatus.CANCELLED
            ])

            order = Order(
                customer_id=customer.id,
                restaurant_id=selected_restaurant.id,
                total_amount=total_amount,
                status=order_status
            )

            db.session.add(order)
            db.session.flush()

            for item in items:
                order_item = OrderItem(
                    order_id=order.id,
                    menu_item_id=item.id,
                    quantity=2,
                    price=item.price
                )
                db.session.add(order_item)

            # Thanh to√°n
            payment_status = PaymentStatus.COMPLETED if order_status == OrderStatus.COMPLETED else PaymentStatus.PENDING
            payment = Payment(
                order_id=order.id,
                amount=total_amount,
                method=PaymentMethod.CASH_ON_DELIVERY,
                status=payment_status
            )
            db.session.add(payment)

            # ƒê√°nh gi√°
            review = None
            if order_status == OrderStatus.COMPLETED:
                review = Review(
                    customer_id=customer.id,
                    restaurant_id=selected_restaurant.id,
                    order_id=order.id,
                    rating=random.randint(4, 5),
                    comment=f"R·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª• v√† ch·∫•t l∆∞·ª£ng m√≥n ƒÉn t·∫°i {selected_restaurant.name}"
                )
                db.session.add(review)

                # Ph·∫£n h·ªìi ƒë√°nh gi√°
                response = ReviewResponse(
                    review=review,
                    owner_id=selected_restaurant.owner_id,
                    response_text="C·∫£m ∆°n b·∫°n ƒë√£ ·ªßng h·ªô qu√°n!"
                )
                db.session.add(response)

            # Th√¥ng b√°o
            notification = Notification(
                user_id=customer.id,
                type=NotificationType.ORDER_STATUS,
                message=f"ƒê∆°n h√†ng #{order.id} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.",
                is_read=False
            )
            db.session.add(notification)

    db.session.commit()

    # ========== T·∫†O PROFILE & ADDRESS CHO USER ==========
    all_users = [admin] + owners + customers
    addresses_tphcm = [
        "123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1",
        "456 L√™ L·ª£i, Qu·∫≠n 1",
        "789 C√°ch M·∫°ng Th√°ng 8, Qu·∫≠n 3",
        "321 V√µ VƒÉn T·∫ßn, Qu·∫≠n 3",
        "654 Nguy·ªÖn Th·ªã Minh Khai, Qu·∫≠n 3",
        "987 L√™ VƒÉn S·ªπ, Ph√∫ Nhu·∫≠n",
        "159 Phan X√≠ch Long, Ph√∫ Nhu·∫≠n",
        "753 ƒêi·ªán Bi√™n Ph·ªß, B√¨nh Th·∫°nh",
        "951 X√¥ Vi·∫øt Ngh·ªá Tƒ©nh, B√¨nh Th·∫°nh",
        "357 L√™ Quang ƒê·ªãnh, G√≤ V·∫•p"
    ]

    for user in all_users:
        # Th√¥ng tin profile
        user.date_of_birth = datetime(1990 + random.randint(0, 20), random.randint(1, 12), random.randint(1, 28))
        user.gender = random.choice(list(Gender))
        user.phone = f"09{random.randint(10000000, 99999999)}"
        db.session.add(user)

        # ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
        addr_def = Address(
            user_id=user.id,
            address_line=random.choice(addresses_tphcm),
            is_default=True
        )
        db.session.add(addr_def)

        # Th√™m 1-3 ƒë·ªãa ch·ªâ ph·ª•
        for _ in range(random.randint(1, 3)):
            addr = Address(
                user_id=user.id,
                address_line=random.choice(addresses_tphcm),
                is_default=False
            )
            db.session.add(addr)

    # ========== T·∫†O M√É KHUY·∫æN M√ÉI ==========
    promo_image_url = [
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg",
        "https://olymstore.net/storage/15.11.2023/Olymstore%20001519%20(1).jpg"
    ]
    promo_codes = [
        {
            "code": "SALE20",
            "description": "Gi·∫£m 20% cho ƒë∆°n h√†ng t·ª´ 200k",
            "discount_type": DiscountType.PERCENT,
            "discount_value": 20,
            "start_date": datetime(2025, 7, 1),
            "end_date": datetime(2025, 8, 31),
            "usage_limit": 100
        },
        {
            "code": "FREESHIP",
            "description": "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn",
            "discount_type": DiscountType.FIXED,
            "discount_value": 20000,
            "start_date": datetime(2025, 7, 15),
            "end_date": datetime(2025, 8, 15),
            "usage_limit": 50
        },
        {
            "code": "HOTDEAL",
            "description": "Gi·∫£m 50k cho ƒë∆°n h√†ng t·ª´ 150k",
            "discount_type": DiscountType.FIXED,
            "discount_value": 50000,
            "start_date": datetime(2025, 8, 1),
            "end_date": datetime(2025, 8, 31),
            "usage_limit": 200
        }
    ]

    for promo in promo_codes:
        pc = PromoCode(
            code=promo["code"],
            description=promo["description"],
            discount_type=promo["discount_type"],
            discount_value=promo["discount_value"],
            start_date=promo["start_date"],
            end_date=promo["end_date"],
            usage_limit=promo["usage_limit"],
            image_url=promo_image_url[i % len(promo_image_url)]
        )
        db.session.add(pc)

    db.session.commit()

    print("‚úÖ Seed th√†nh c√¥ng")


if __name__ == '__main__':
    app = init_app()
    with app.app_context():
        db.drop_all()
        db.create_all()
        seed_data()
